{"version":3,"sources":["styles.jsx","App.js","YYYYMMDD.js","components/Tooltip.js","components/AlertDialog.js","components/UrlToClipboardButton.js","serviceWorker.js","index.js","usePersistedState.js"],"names":["drawerWidth","window","innerWidth","document","querySelector","offsetWidth","useStyles","makeStyles","theme","root","display","appBar","breakpoints","up","transition","transitions","create","easing","sharp","duration","leavingScreen","appBarShift","width","easeOut","enteringScreen","marginRight","title","flexGrow","hide","drawer","flexShrink","drawerPaper","drawerHeader","alignItems","padding","spacing","mixins","toolbar","justifyContent","content","maxWidth","contentShift","chips","textAlign","margin","chip","chipUnSelected","backgroundColor","formControl","noLabel","marginTop","iOS","process","browser","test","navigator","userAgent","boroughNames","speciesTypes","Alder","Apple","Ash","Beech","Birch","Blackthorn","Cherry","Chestnut","Cypress","Elm","Hawthorn","Hazel","Hornbeam","Lime","Maple","Oak","Other","Pear","Pine","Plane","Poplar","Rowan","Sycamore","Whitebeam","Willow","App","showBorder","onTilesLoad","useTheme","classes","usePersistedState","Object","keys","speciesFilter","setSpeciesFilter","treeCountsCity","setTreeCountsCity","useState","treeQuery","setTreeQuery","treeQueryBoroughs","setTreeQueryBoroughs","treeQueryBoroughTotals","setTreeQueryBoroughTotals","boroughsQuery","setBoroughsQuery","isReady","setIsReady","iframeLoaded","setIframeLoaded","iFrameIsLoaded","useEffect","fonts","load","then","ignore","a","axios","resultCityTotals","resultBoroughs","resultBoroughTotals","treeTally","data","reduce","acc","curr","Number","count","map","tree","i","id","commonName","gla_tree_group","treeCount","percentage","Math","round","fetchData","useQueryParam","StringParam","trees","setTrees","layerClick","d","setTabValue","treeProps","properties","lng","geometry","coordinates","lat","pack","gotoTree","flyTo","center","zoom","speed","curve","t","drawerOpen","setDrawerOpen","TabPanel","props","children","value","index","other","role","hidden","aria-labelledby","p","tabsProps","tabValue","sortModel","field","sort","React","selectionValue","setSelectionValue","mapContainerRef","useRef","setMap","tooltipRef","mapboxgl","Popup","offset","closeButton","markerDiv","createElement","className","markerDivSpan","newContent","createTextNode","appendChild","markerRef","Marker","anchor","mapLng","mapLat","Iframe","memo","onLoad","height","frameBorder","style","border","src","allowFullScreen","Map","container","current","touchZoomRotate","disableRotation","addControl","NavigationControl","showCompass","showZoom","geocoder","MapboxGeocoder","accessToken","marker","collapsed","countries","bbox","filter","item","context","split","shift","cur","createTreeMarker","feature","setLngLat","addTo","_element","removeChild","childNodes","tree_name","borough","on","addLayer","type","source","url","paint","entries","val","concat","base","stops","e","features","length","getCanvas","cursor","queryRenderedFeatures","point","tooltipNode","ReactDOM","render","lngLat","setDOMContent","addSource","getSource","setData","result","unpack","remove","position","visibility","clsx","variant","noWrap","color","aria-label","edge","onClick","setTimeout","resize","ref","top","left","disableBackdropTransition","disableDiscovery","open","onOpen","console","log","onClose","paper","text","label","setFilter","species","rgb","slice","includes","f","square","onChange","event","newValue","centered","Intl","NumberFormat","format","Paragraph","Line","rows","columns","headerName","pageSize","multiple","options","getOptionLabel","option","filterSelectedOptions","selection","scrollIntoView","behavior","boroughSpecies","el","boroughGroupBySpecies","boro","boroughCounts","boroughSpeciesCount","retval","boroughSpeciesMain","b","pop","boroughName","treeTypes","values","mostCommonTree","renderInput","params","reverse","component","Paper","table","row","scope","toTitleCase","replaceAll","align","YYYYMMDD","colSpan","Image","size","objectid","deleteTree","str","y","substr","m","Date","toLocaleDateString","weekday","year","month","day","Tooltip","AlertDialog","setOpen","handleClose","aria-describedby","autoFocus","UrlToClipboardButton","clipboard","writeText","location","href","anchorOrigin","vertical","horizontal","message","reason","autoHideDuration","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","styleLink","rel","head","ReactRouterRoute","Route","getElementById","URL","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","key","defaultValue","persistedState","localStorage","getItem","JSON","parse","setState","setItem","stringify"],"mappings":"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","file":"static/js/main.9c7f5fe6.chunk.js","sourcesContent":["import { makeStyles } from '@material-ui/core/styles'\n\nexport const drawerWidth =\n  window.innerWidth < 500\n    ? document.querySelector('#root').offsetWidth\n    : document.querySelector('#root').offsetWidth / 2\n\nexport const useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex'\n  },\n\n  appBar: {\n    [theme.breakpoints.up('sm')]: {\n      transition: theme.transitions.create(['margin', 'width'], {\n        easing: theme.transitions.easing.sharp,\n        duration: theme.transitions.duration.leavingScreen\n      })\n    }\n  },\n  appBarShift: {\n    width: `calc(100% - ${drawerWidth}px)`,\n    transition: theme.transitions.create(['margin', 'width'], {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginRight: drawerWidth\n  },\n  title: {\n    flexGrow: 1\n  },\n  hide: {\n    display: 'none !important'\n  },\n  drawer: {\n    [theme.breakpoints.up('sm')]: { width: drawerWidth, flexShrink: 0 }\n  },\n  drawerPaper: {\n    width: drawerWidth\n  },\n  drawerHeader: {\n    display: 'flex',\n    alignItems: 'center',\n    padding: theme.spacing(0, 1),\n    // necessary for content to be below app bar\n    ...theme.mixins.toolbar,\n    justifyContent: 'flex-start'\n  },\n  content: {\n    maxWidth: '100%',\n    flexGrow: 1,\n    padding: theme.spacing(3),\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.sharp,\n      duration: theme.transitions.duration.leavingScreen\n    }),\n    marginRight: -drawerWidth\n  },\n  contentShift: {\n    transition: theme.transitions.create('margin', {\n      easing: theme.transitions.easing.easeOut,\n      duration: theme.transitions.duration.enteringScreen\n    }),\n    marginRight: 0\n  },\n  // heading: {\n  //   fontSize: theme.typography.pxToRem(15),\n  //   flexBasis: '33.33%',\n  //   flexShrink: 0\n  // },\n  // secondaryHeading: {\n  //   fontSize: theme.typography.pxToRem(15),\n  //   color: theme.palette.text.secondary\n  // },\n  chips: {\n    textAlign: 'center',\n    margin: '1rem auto',\n    width: 'calc(100% - 2rem)'\n  },\n  chip: {\n    margin: '.1rem'\n  },\n  chipUnSelected: {\n    backgroundColor: 'gray !important'\n  },\n  formControl: {\n    margin: theme.spacing(1),\n    width: '100%'\n  },\n  noLabel: {\n    marginTop: theme.spacing(3)\n  }\n}))\n","import React, { useState, useEffect, useRef } from 'react'\nimport mapboxgl from 'maplibre-gl'\nimport 'maplibre-gl/dist/mapbox-gl.css'\nimport ReactDOM from 'react-dom'\n\nimport MapboxGeocoder from '@mapbox/mapbox-gl-geocoder'\nimport '@mapbox/mapbox-gl-geocoder/dist/mapbox-gl-geocoder.css'\n\nimport axios from 'axios'\nimport PropTypes from 'prop-types'\n\nimport YYYYMMDD from './YYYYMMDD'\nimport toTitleCase from 'titlecase'\nimport Tooltip from './components/Tooltip'\nimport AlertDialog from './components/AlertDialog'\nimport UrlToClipboardButton from './components/UrlToClipboardButton'\n// import Iframe from './components/iFrame'\n\nimport { drawerWidth, useStyles } from './styles.jsx'\n\nimport usePersistedState from './usePersistedState'\nimport clsx from 'clsx'\nimport { useQueryParam, StringParam } from 'use-query-params'\nimport { pack, unpack } from 'jcb64'\n\nimport IconButton from '@material-ui/core/IconButton'\nimport SwipeableDrawer from '@material-ui/core/SwipeableDrawer'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport CssBaseline from '@material-ui/core/CssBaseline'\nimport Typography from '@material-ui/core/Typography'\nimport Divider from '@material-ui/core/Divider'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport ChevronRightIcon from '@material-ui/icons/ChevronRight'\nimport Tabs from '@material-ui/core/Tabs'\nimport Tab from '@material-ui/core/Tab'\nimport Box from '@material-ui/core/Box'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport Chip from '@material-ui/core/Chip'\nimport { Placeholder } from 'semantic-ui-react'\nimport { DataGrid, ColDef } from '@material-ui/data-grid'\nimport Table from '@material-ui/core/Table'\nimport TableBody from '@material-ui/core/TableBody'\nimport TableCell from '@material-ui/core/TableCell'\nimport TableContainer from '@material-ui/core/TableContainer'\nimport TableRow from '@material-ui/core/TableRow'\nimport Autocomplete from '@material-ui/lab/Autocomplete'\nimport TextField from '@material-ui/core/TextField'\nimport { useTheme } from '@material-ui/core/styles'\n\nconst iOS = process.browser && /iPad|iPhone|iPod/.test(navigator.userAgent)\n\nconst MAPBOX_TOKEN =\n  'pk.eyJ1IjoiZ2xhLWdpcyIsImEiOiJjanBvNGh1bncwOTkzNDNueWt5MGU1ZGtiIn0.XFxLdq2dXttcXSXTiREPTA'\n\nconst boroughNames = [\n  'Barking and Dagenham',\n  'Barnet',\n  'Bexley',\n  'Bromley',\n  'Camden',\n  'City of London',\n  'Ealing',\n  'Enfield',\n  'Greenwich',\n  'Hammersmith and Fulham',\n  'Harrow',\n  'Hillingdon',\n  'Hounslow',\n  'Islington',\n  'Kensington and Chelsea',\n  'Lambeth ',\n  'Lewisham',\n  'Merton ',\n  'Newham',\n  'Redbridge',\n  'Richmond',\n  'Southwark',\n  'Sutton',\n  'TFL',\n  'Tower Hamlets',\n  'Waltham Forest',\n  'Westminster'\n]\n\nconst speciesTypes = {\n  Alder: ['rgb', 255, 255, 224],\n  Apple: ['rgb', 252, 255, 174],\n  Ash: ['rgb', 246, 255, 128],\n  Beech: ['rgb', 238, 255, 88],\n  Birch: ['rgb', 227, 255, 53],\n  'Black Locust': ['rgb', 227, 255, 53],\n  Blackthorn: ['rgb', 200, 255, 0],\n  Cherry: ['rgb', 200, 255, 0],\n  Chestnut: ['rgb', 170, 255, 0],\n  Cypress: ['rgb', 154, 255, 0],\n  Elm: ['rgb', 154, 255, 0],\n  Hawthorn: ['rgb', 123, 255, 0],\n  Hazel: ['rgb', 109, 255, 0],\n  Hornbeam: ['rgb', 109, 255, 0],\n  'Horse Chestnut': ['rgb', 95, 255, 0],\n  Lime: ['rgb', 70, 251, 0],\n  Maple: ['rgb', 60, 245, 0],\n  Oak: ['rgb', 51, 238, 0],\n  Other: ['rgb', 44, 230, 0],\n  Pear: ['rgb', 38, 221, 0],\n  Pine: ['rgb', 38, 221, 0],\n  Plane: ['rgb', 30, 201, 0],\n  Poplar: ['rgb', 29, 189, 0],\n  Rowan: ['rgb', 28, 177, 6],\n  Sycamore: ['rgb', 29, 165, 16],\n  Whitebeam: ['rgb', 31, 152, 26],\n  Willow: ['rgb', 31, 152, 26]\n}\n\nexport default function App({ showBorder = false, onTilesLoad = null }) {\n  const theme = useTheme()\n  const classes = useStyles(theme)\n\n  const [speciesFilter, setSpeciesFilter] = usePersistedState(\n    'species',\n    Object.keys(speciesTypes)\n  )\n\n  const [treeCountsCity, setTreeCountsCity] = usePersistedState(\n    'treeCounts',\n    null\n  )\n  const [treeQuery, setTreeQuery] = useState(null)\n  const [treeQueryBoroughs, setTreeQueryBoroughs] = useState(null)\n  const [treeQueryBoroughTotals, setTreeQueryBoroughTotals] = useState(null)\n\n  const [boroughsQuery, setBoroughsQuery] = useState(null)\n\n  const [isReady, setIsReady] = useState(false)\n\n  const [iframeLoaded, setIframeLoaded] = useState(false)\n  const iFrameIsLoaded = () => {\n    setIframeLoaded(true)\n  }\n\n  // try to avoid flash of unstyled content (f.o.u.c)\n  useEffect(() => {\n    document.fonts.load('18px Lato').then(() => setIsReady(true))\n  }, [])\n\n  // TREE GROUPBY SPECIES\n  useEffect(() => {\n    // load async data\n    let ignore = false\n\n    const fetchData = async () => {\n      // STATS CITY (by tree type)\n      const resultCityTotals = await axios(\n        `https://maps.london.gov.uk/v1/query/core_london_street_trees_web_3857?columns=count(gla_tree_group)%2Cgla_tree_group&group=gla_tree_group`\n      )\n\n      // STATS BOROUGH (by tree type)\n      const resultBoroughs = await axios(\n        `https://maps.london.gov.uk/v1/query/core_london_street_trees_web_3857?columns=count(gla_tree_group)%2Cgla_tree_group%2Cborough&group=borough%2Cgla_tree_group`\n      )\n\n      // STATS BOROUGH (total trees)\n      const resultBoroughTotals = await axios(\n        `https://maps.london.gov.uk/v1/query/core_london_street_trees_web_3857?columns=count(borough)%2Cborough&group=borough`\n      )\n\n      if (!ignore) {\n        const treeTally = resultCityTotals.data.reduce(\n          (acc, curr) => Number(acc) + Number(curr.count),\n          0\n        )\n\n        // STATS - CITY\n        setTreeQuery(\n          resultCityTotals.data.map((tree, i) => ({\n            id: i,\n            commonName: tree.gla_tree_group,\n            treeCount: Number(tree.count),\n            percentage: Math.round(100 * (Number(tree.count) / treeTally))\n          }))\n        )\n\n        // TALLY TOTAL TREES\n        setTreeCountsCity(treeTally)\n\n        // STATS BOROUGH (by tree type)\n        setTreeQueryBoroughs(resultBoroughs.data)\n\n        // STATS BOROUGH (total trees)\n        setTreeQueryBoroughTotals(resultBoroughTotals.data)\n      }\n    }\n\n    fetchData()\n    return () => (ignore = true)\n  }, []) // eslint-disable-line\n\n  const [trees, setTrees] = useQueryParam('trees', StringParam)\n  // const [treeLngLat, setTreeLngLat] = useState([])\n\n  const addTree = tree => {\n    setTrees(pack([tree]), 'push')\n    // setTreeLngLat([tree.lng, tree.lat])\n  }\n\n  const deleteTree = tree => {\n    setTrees(\n      pack(unpack(trees).filter(el => el.objectid !== tree.objectid)),\n      'push'\n    )\n    markerRef.current.remove()\n    setTabValue(Number(0))\n  }\n\n  const _renderChip = (species, i) => {\n    const colourIsLight = rgb => {\n      var a = 1 - (0.299 * rgb[0] + 0.587 * rgb[1] + 0.114 * rgb[2]) / 255\n      return a < 0.5\n    }\n\n    const chipClick = () => {\n      const filter = speciesFilter.includes(species)\n        ? speciesFilter.filter(f => f !== species)\n        : speciesFilter.concat(species)\n      map.setFilter('trees', ['in', 'gla_tree_group', ...filter])\n      setSpeciesFilter(filter)\n    }\n\n    return (\n      isReady && (\n        <Chip\n          variant=\"outlined\"\n          label={species}\n          key={species}\n          style={{\n            backgroundColor: `rgb(${speciesTypes[species].slice(1)})`,\n            color:\n              !speciesFilter.includes(species) ||\n              !colourIsLight(speciesTypes[species].slice(1))\n                ? 'whitesmoke'\n                : '#0C090A'\n          }}\n          className={clsx(\n            classes.chip,\n            speciesFilter.includes(species) ? '' : classes.chipUnSelected\n          )}\n          onClick={chipClick}\n        />\n      )\n    )\n  }\n\n  const toggleChips = () => {\n    const filter =\n      speciesFilter.length !== Object.keys(speciesTypes).length\n        ? Object.keys(speciesTypes)\n        : []\n    map.setFilter('trees', ['in', 'gla_tree_group', ...filter])\n    setSpeciesFilter(filter)\n  }\n\n  const layerClick = d => {\n    setTabValue(Number(1))\n    const treeProps = d.properties\n    treeProps.lng = d.geometry.coordinates[0]\n    treeProps.lat = d.geometry.coordinates[1]\n    addTree(treeProps)\n  }\n\n  const gotoLocation = (lng, lat, zoom = 17) => {\n    map &&\n      map.flyTo({\n        center: [lng, lat],\n        zoom: 14,\n        speed: 2,\n        curve: 1,\n        easing(t) {\n          return t\n        }\n      })\n  }\n\n  const gotoTree = tree => {\n    gotoLocation(tree.lng, tree.lat, 20)\n  }\n\n  const [drawerOpen, setDrawerOpen] = usePersistedState('drawer', true)\n\n  const handleDrawerOpen = () => {\n    setDrawerOpen(true)\n    setTimeout(function() {\n      map.resize()\n    }, 100)\n  }\n\n  const handleDrawerClose = () => {\n    setDrawerOpen(false)\n    setTimeout(function() {\n      map.resize()\n    }, 10)\n  }\n\n  // TABS\n  const TabPanel = props => {\n    const { children, value, index, ...other } = props\n\n    return (\n      isReady && (\n        <div\n          role=\"tabpanel\"\n          hidden={value !== index}\n          id={`simple-tabpanel-${index}`}\n          aria-labelledby={`simple-tab-${index}`}\n          {...other}\n        >\n          {value === index && <Box p={3}>{children}</Box>}\n        </div>\n      )\n    )\n  }\n\n  TabPanel.propTypes = {\n    children: PropTypes.node,\n    index: PropTypes.any.isRequired,\n    value: PropTypes.any.isRequired\n  }\n\n  const tabsProps = index => {\n    return {\n      id: `scrollable-auto-tab-${index}`,\n      // 'aria-controls': `full-width-tabpanel-${index}`\n      'aria-controls': `scrollable-auto-tabpanel-${index}`\n    }\n  }\n  const [tabValue, setTabValue] = usePersistedState('tab', 0)\n\n  const tabChange = (event, newValue) => {\n    setTabValue(Number(newValue))\n  }\n\n  // USED IN CITY AND AREA VALUES\n  const columnsGeneralStats: ColDef[] = [\n    { field: 'commonName', headerName: 'Common Name', width: 130 },\n    { field: 'treeCount', headerName: 'Tree Count', width: 130 },\n    { field: 'percentage', headerName: 'Percentage', width: 130 }\n  ]\n\n  // USED WHEN VIEWING STATS FOR ONE OR MORE BOROUGHS\n  const columnsCompareBoroughs: ColDef[] = [\n    { field: 'boroughName', headerName: 'Maintainer', width: 130 },\n    { field: 'treeCount', headerName: 'Tree Count', width: 130 },\n    { field: 'treeTypes', headerName: 'Tree Types', width: 130 },\n    { field: 'mostCommonTree', headerName: 'Most Common Tree (n)', width: 150 }\n  ]\n\n  const sortModel = [\n    {\n      field: 'treeCount',\n      sort: 'desc'\n    }\n  ]\n\n  const [selectionValue, setSelectionValue] = React.useState([])\n\n  const mapContainerRef = useRef(null)\n  const [map, setMap] = useState(null)\n  const tooltipRef = useRef(\n    new mapboxgl.Popup({ offset: 5, closeButton: false })\n  )\n\n  const markerDiv = document.createElement('div')\n  markerDiv.className = 'tree'\n  const markerDivSpan = document.createElement('span')\n  const newContent = document.createTextNode('')\n  markerDivSpan.appendChild(newContent)\n  markerDiv.appendChild(markerDivSpan)\n\n  const markerRef = useRef(\n    new mapboxgl.Marker(markerDiv, { anchor: 'top-left' })\n  )\n\n  const [mapLng, setLng] = usePersistedState('lng', -0.1)\n  const [mapLat, setLat] = usePersistedState('lat', 51.49)\n  const [zoom, setZoom] = usePersistedState('zoom', 9)\n\n  const Iframe = React.memo(props => (\n    <iframe\n      title=\"streetview\"\n      onLoad={iFrameIsLoaded}\n      height=\"250\"\n      frameBorder=\"0\"\n      style={{ width: '100%', border: 0 }}\n      src={\n        'https://www.google.com/maps/embed/v1/streetview?key=AIzaSyBMog3xE4XjGzf03rpSzZ8ryRq0LYBuHFM&pitch=10&location=' +\n        props.lat +\n        ',' +\n        props.lng\n      }\n      allowFullScreen\n    ></iframe>\n  ))\n\n  // MAIN PROGRAM\n  useEffect(() => {\n    // Initialize map when component mounts\n    const map = new mapboxgl.Map({\n      container: mapContainerRef.current,\n      style: 'os_night.json',\n      center: [mapLng, mapLat],\n      zoom: zoom\n    })\n    map.touchZoomRotate.disableRotation()\n    map.addControl(\n      new mapboxgl.NavigationControl({ showCompass: false, showZoom: true }),\n      'bottom-left'\n    )\n\n    const geocoder = new MapboxGeocoder({\n      accessToken: MAPBOX_TOKEN,\n      mapboxgl: mapboxgl,\n      marker: false,\n      collapsed: true,\n      countries: 'gb',\n      bbox: [-0.489, 51.28, 0.236, 51.686],\n      filter: function(item) {\n        if (!item.context) {\n          return item\n        } else {\n          return item.context\n            .map(function(i) {\n              return (\n                i.id.split('.').shift() === 'district' &&\n                i['text'] === 'Greater London'\n              )\n            })\n            .reduce(function(acc, cur) {\n              return acc || cur\n            })\n        }\n      }\n    })\n\n    map.addControl(geocoder, 'top-left')\n\n    const createTreeMarker = (feature, markerRef, map) => {\n      // marker - dom manipulation\n      const { geometry, properties } = feature\n      markerRef.current.setLngLat(geometry.coordinates).addTo(map)\n      markerRef.current._element.children[0].removeChild(\n        markerRef.current._element.children[0].childNodes[0]\n      )\n      const newContent = document.createTextNode(\n        properties.tree_name\n          ? properties.tree_name\n          : properties.gla_tree_group + ', ' + properties.borough\n      )\n      markerRef.current._element.children[0].appendChild(newContent)\n    }\n\n    map.on('load', () => {\n      map.addLayer({\n        id: 'trees',\n        type: 'circle',\n        filter: ['in', 'gla_tree_group', ...speciesFilter],\n        'source-layer': 'trees',\n        source: {\n          type: 'vector',\n          // tiles: ['https://apps.london.gov.uk/v1/mvt/trees/{z}/{x}/{y}?columns=gla_tree_group,common_name,species_name,gla_id,gla_tree_group,load_date,age,spread__m_,height__m_,diameter_at_breast_height__cm_,borough,age_group'] // postgis via dirt\n          url: 'https://apps.london.gov.uk/tileserver/data/trees.json'\n        },\n        paint: {\n          'circle-color': [\n            'match',\n            ['get', 'gla_tree_group'],\n            ...[\n              ...Object.entries(speciesTypes).reduce(\n                (acc, val) => acc.concat(val),\n                []\n              )\n            ],\n            /* other */ ['rgb', 255, 255, 255]\n          ],\n          // make circles larger as the user zooms from z12 to z22\n          'circle-radius': {\n            base: 0.5,\n            stops: [\n              [10, 1],\n              [11, 2],\n              [14, 3],\n              [15, 4],\n              [16, 7],\n              [17, 8],\n              [18, 15],\n              [19, 20],\n              [20, 40]\n            ]\n          }\n        }\n      })\n\n      // change cursor to pointer when user hovers over a clickable feature\n      map.on('mouseenter', 'trees', e => {\n        if (e.features.length) {\n          map.getCanvas().style.cursor = 'pointer'\n        }\n      })\n\n      // reset cursor to default when user is no longer hovering over a clickable feature\n      map.on('mouseleave', 'trees', () => {\n        map.getCanvas().style.cursor = ''\n      })\n\n      // add tooltip when users mouse move over a point\n      map.on('mousemove', 'trees', e => {\n        const features = map.queryRenderedFeatures(e.point)\n        if (features.length) {\n          const feature = features[0]\n          // Create tooltip node\n          const tooltipNode = document.createElement('div')\n          ReactDOM.render(<Tooltip feature={feature} />, tooltipNode)\n\n          // Set tooltip on map\n          tooltipRef.current\n            .setLngLat(e.lngLat)\n            .setDOMContent(tooltipNode)\n            .addTo(map)\n        }\n      })\n\n      map.on('click', 'trees', e => {\n        const features = map.queryRenderedFeatures(e.point)\n        if (features.length) {\n          const feature = features[0]\n          layerClick(feature)\n          createTreeMarker(feature, markerRef, map)\n          setIframeLoaded(false)\n        }\n      })\n\n      map.on('moveend', () => {\n        // const { lng, lat } = map.getCenter()\n        // setLng(lng)\n        // setLat(lat)\n        // setZoom(map.getZoom())\n      })\n\n      map.addSource('single-point', {\n        type: 'geojson',\n        data: {\n          type: 'FeatureCollection',\n          features: []\n        }\n      })\n\n      map.addLayer({\n        id: 'point',\n        source: 'single-point',\n        type: 'circle',\n        paint: {\n          'circle-radius': 10,\n          'circle-color': '#448ee4'\n        }\n      })\n\n      geocoder.on('result', function(e) {\n        map.getSource('single-point').setData(e.result.geometry)\n      })\n\n      setMap(map)\n    })\n\n    if (trees && unpack(trees).length > 0) {\n      setTabValue(Number(1))\n      const tree = unpack(trees)[0]\n      // setTreeLngLat([tree.lng, tree.lat])\n      const geometry = { coordinates: [tree.lng, tree.lat] }\n      let properties = tree\n      delete properties.lngLat\n      const tm = { geometry: geometry, properties: properties }\n      createTreeMarker(tm, markerRef, map)\n    }\n\n    // Clean up on unmount\n    return () => map.remove()\n  }, []) // eslint-disable-line\n\n  return (\n    <div className={classes.root}>\n      <CssBaseline />\n      <AppBar\n        position=\"fixed\"\n        style={{ backgroundColor: 'unset', visibility: 'hidden' }}\n        className={clsx(classes.appBar, {\n          [classes.appBarShift]: drawerOpen\n        })}\n      >\n        <Toolbar>\n          <Typography\n            variant=\"h6\"\n            noWrap\n            className={classes.title}\n          ></Typography>\n          <IconButton\n            color=\"inherit\"\n            aria-label=\"open drawer\"\n            edge=\"end\"\n            onClick={handleDrawerOpen}\n            className={clsx(drawerOpen && classes.hide)}\n            style={{ visibility: 'visible' }}\n          >\n            <MenuIcon />\n          </IconButton>\n        </Toolbar>\n      </AppBar>\n      <main\n        className={clsx(classes.content, {\n          [classes.contentShift]: drawerOpen\n        })}\n      >\n        <div className={classes.drawerHeader} />\n        <div>\n          <div\n            ref={mapContainerRef}\n            style={{\n              position: 'absolute',\n              top: 0,\n              left: 0,\n              height: '100%',\n              width: `${\n                drawerOpen\n                  ? document.querySelector('#root').offsetWidth -\n                    drawerWidth +\n                    'px'\n                  : '100%' //document.querySelector('#root').offsetWidth + 'px'\n              }`\n            }}\n          />\n        </div>\n      </main>\n      <SwipeableDrawer\n        disableBackdropTransition={!iOS}\n        disableDiscovery={iOS}\n        className={classes.drawer}\n        variant=\"persistent\"\n        anchor=\"right\"\n        open={drawerOpen}\n        onOpen={() => console.log('opened')}\n        onClose={() => console.log('closed')}\n        classes={{\n          paper: classes.drawerPaper\n        }}\n      >\n        <div className={classes.drawerHeader}>\n          <IconButton onClick={handleDrawerClose}>\n            <ChevronRightIcon />\n          </IconButton>\n          <h3 style={{ textAlign: 'center', margin: '0 auto' }}>\n            LONDON STREET TREES\n          </h3>{' '}\n          <AlertDialog\n            title=\"About\"\n            text=\"This map has been created using tree data made available by London’s local authorities and Transport for London. It shows information for over 800,000 trees. The majority of these are street trees, with some trees in parks and open spaces. London has over 8 million trees, so the map is only a partial illustration of the capital’s urban forest, and does not include data from all boroughs. The data was last updated in 2019-20.\"\n          />\n        </div>\n        <Divider />\n        <div className={classes.chips}>\n          <Chip\n            variant=\"outlined\"\n            label={\n              speciesFilter.length !== Object.keys(speciesTypes).length\n                ? 'Show'\n                : 'Hide'\n            }\n            key={'All'}\n            className={\n              speciesFilter.length !== Object.keys(speciesTypes).length\n                ? ''\n                : classes.chipUnSelected\n            }\n            onClick={toggleChips}\n          />\n          {speciesTypes && Object.keys(speciesTypes).map(_renderChip)}\n        </div>\n        <Divider />\n        <Paper square>\n          <Tabs\n            value={tabValue}\n            onChange={tabChange}\n            // variant=\"scrollable\"\n            // scrollButtons=\"auto\"\n            // aria-label=\"scrollable auto tabs\"\n            centered\n          >\n            <Tab label=\"Tree areas\" {...tabsProps(0)} />\n            <Tab label=\"Tree details\" {...tabsProps(1)} />\n          </Tabs>\n        </Paper>\n        <TabPanel value={tabValue} index={0}>\n          <h1>Citywide Statistics</h1>\n          {treeCountsCity ? (\n            <p>\n              There are {new Intl.NumberFormat('en-GB').format(treeCountsCity)}{' '}\n              trees in this dataset\n            </p>\n          ) : (\n            <Placeholder>\n              <Placeholder.Paragraph>\n                <Placeholder.Line />\n              </Placeholder.Paragraph>\n            </Placeholder>\n          )}\n          {treeQuery ? (\n            <>\n              <div style={{ height: 280, width: '100%' }}>\n                <DataGrid\n                  rows={treeQuery}\n                  sortModel={sortModel}\n                  columns={columnsGeneralStats}\n                  pageSize={3}\n                />\n              </div>\n            </>\n          ) : (\n            <span>\n              <Placeholder>\n                <Placeholder.Paragraph>\n                  <Placeholder.Line />\n                  <Placeholder.Line />\n                  <Placeholder.Line />\n                  <Placeholder.Line />\n                  <Placeholder.Line />\n                  <Placeholder.Line />\n                  <Placeholder.Line />\n                </Placeholder.Paragraph>\n              </Placeholder>\n            </span>\n          )}\n          <h1>Maintainer Statistics</h1>\n          <Autocomplete\n            multiple\n            value={selectionValue}\n            id=\"tags-outlined\"\n            options={boroughNames}\n            getOptionLabel={option => option}\n            filterSelectedOptions\n            onChange={(event, selection) => {\n              setSelectionValue(selection)\n              setTimeout(function() {\n                document\n                  .querySelector('div.MuiDataGrid-footer')\n                  .scrollIntoView({ behavior: 'smooth' }) // BOROUGH SPECIES COUNTS\n              }, 500)\n              const boroughSpecies = treeQueryBoroughs\n                .filter(el => selection.includes(el.borough))\n                .reduce((acc, curr) => {\n                  acc[curr.borough] = acc[curr.gla_tree_group] || 0\n                  return acc\n                }, {})\n              const boroughGroupBySpecies = Object.keys(\n                boroughSpecies\n              ).map(el => treeQueryBoroughs.filter(boro => boro.borough === el))\n\n              // BOROUGH COUNTS\n              const boroughCounts = treeQueryBoroughTotals.filter(el =>\n                selection.includes(el.borough)\n              )\n\n              // NUMBER OF SPECIES PER BOROUGH\n              const boroughSpeciesCount = boroughGroupBySpecies.map(el => {\n                const retval = {}\n                retval[el[0].borough] = el.length\n                return retval\n              })\n\n              // MAIN SPECIES PER BOROUGH\n              const boroughSpeciesMain = boroughGroupBySpecies.map(el =>\n                el.sort((a, b) => Number(a.count) - Number(b.count)).pop()\n              )\n\n              setBoroughsQuery(\n                boroughCounts.map((borough, i) => ({\n                  id: i,\n                  boroughName: borough.borough,\n                  //new Intl.NumberFormat('en-GB').format(\n                  treeCount: Number(boroughCounts[i].count),\n                  // ),\n                  treeTypes: Number(\n                    Object.values(boroughSpeciesCount[i]).pop()\n                  ),\n                  mostCommonTree: `${\n                    boroughSpeciesMain[i].gla_tree_group\n                  } (${new Intl.NumberFormat('en-GB').format(\n                    boroughSpeciesMain[i].count\n                  )}, ${Math.round(\n                    100 *\n                      (Number(boroughSpeciesMain[i].count) /\n                        Number(boroughCounts[i].count)),\n                    2\n                  )}%)`\n                }))\n              )\n            }}\n            renderInput={params => (\n              <TextField\n                {...params}\n                variant=\"outlined\"\n                label=\"One or more organisations\"\n              />\n            )}\n          />\n          {boroughsQuery && boroughsQuery.length > 0 ? (\n            <div style={{ height: 280, width: '100%' }}>\n              <DataGrid\n                rows={boroughsQuery}\n                sortModel={sortModel}\n                columns={columnsCompareBoroughs}\n                pageSize={3}\n              />\n            </div>\n          ) : (\n            ''\n          )}\n        </TabPanel>\n        <TabPanel value={tabValue} index={1}>\n          {trees && unpack(trees).length > 0 ? (\n            <div>\n              {trees &&\n                trees.length > 0 &&\n                unpack(trees)\n                  .reverse()\n                  .map((tree, index) => (\n                    <div key={index}>\n                      <h1>\n                        {tree.tree_name ? tree.tree_name : tree.gla_tree_group}\n                      </h1>\n                      <TableContainer component={Paper}>\n                        <Table\n                          className={classes.table}\n                          aria-label=\"simple table\"\n                        >\n                          <TableBody>\n                            {Object.keys(tree)\n                              .filter(\n                                el =>\n                                  ![\n                                    'objectid',\n                                    'tree_name',\n                                    'lng',\n                                    'lat'\n                                  ].includes(el)\n                              )\n                              .filter(row => tree[row] !== '')\n                              .map((row, i) => (\n                                <TableRow key={i}>\n                                  <TableCell scope=\"row\" variant=\"head\">\n                                    {toTitleCase(row.replaceAll('_', ' '))}\n                                  </TableCell>\n                                  <TableCell align=\"left\">\n                                    {row !== 'load_date'\n                                      ? tree[row]\n                                      : YYYYMMDD(tree[row])}\n                                  </TableCell>\n                                </TableRow>\n                              ))}\n                            {!iframeLoaded ? (\n                              <TableRow key=\"streetviewPlaceholder\">\n                                <TableCell colSpan={2}>\n                                  <Placeholder\n                                    style={{ height: 250, width: '100%' }}\n                                  >\n                                    <Placeholder.Image />\n                                  </Placeholder>\n                                </TableCell>\n                              </TableRow>\n                            ) : null}\n\n                            {\n                              <TableRow key=\"streetview\">\n                                <TableCell colSpan={2}>\n                                  <Iframe lng={tree.lng} lat={tree.lat} />\n                                </TableCell>\n                              </TableRow>\n                            }\n                          </TableBody>\n                        </Table>\n                      </TableContainer>{' '}\n                      <div>\n                        <p></p>\n                        <Button\n                          size=\"small\"\n                          variant=\"contained\"\n                          onClick={() => gotoTree(tree)}\n                        >\n                          Centre on map\n                        </Button>\n                        <p></p>\n                        <UrlToClipboardButton />\n                        <p></p>\n                        <Button\n                          size=\"small\"\n                          variant=\"contained\"\n                          onClick={() => {\n                            deleteTree(tree)\n                          }}\n                        >\n                          Remove this tree's detail\n                        </Button>\n                      </div>\n                    </div>\n                  ))}\n            </div>\n          ) : (\n            <p>No trees currently selected</p>\n          )}\n        </TabPanel>\n      </SwipeableDrawer>\n    </div>\n  )\n}\n","export default function YYYYMMDD(str) {\n  var y = str.substr(0, 4),\n    m = str.substr(4, 2),\n    d = str.substr(6, 2)\n  var D = new Date(y, m, d)\n  return D.toLocaleDateString('en-GB', {\n    weekday: 'long',\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric'\n  })\n}\n","import React from 'react'\n\nconst Tooltip = ({ feature }) => {\n  return (\n    <div>\n      {feature.properties.tree_name\n        ? feature.properties.tree_name +\n          ' (' +\n          feature.properties.gla_tree_group +\n          ')'\n        : feature.properties.gla_tree_group}\n      {', '}\n      {feature.properties.borough}\n    </div>\n  )\n}\n\nexport default Tooltip\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogContentText from '@material-ui/core/DialogContentText'\nimport DialogTitle from '@material-ui/core/DialogTitle'\n\nexport default function AlertDialog(props) {\n  const [open, setOpen] = React.useState(false)\n  const { title, text } = props\n\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  return (\n    <div>\n      <Button size=\"small\" variant=\"contained\" onClick={handleClickOpen}>\n        {title}\n      </Button>\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        aria-describedby=\"alert-dialog-description\"\n      >\n        <DialogTitle id=\"alert-dialog-title\">{title}</DialogTitle>\n        <DialogContent>\n          <DialogContentText id=\"alert-dialog-description\">\n            {text}\n          </DialogContentText>\n        </DialogContent>\n        <DialogActions>\n          <Button onClick={handleClose} color=\"primary\" autoFocus>\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n","import React from 'react'\nimport Button from '@material-ui/core/Button'\nimport Snackbar from '@material-ui/core/Snackbar'\n\nexport default function UrlToClipboardButton() {\n  const [open, setOpen] = React.useState(false)\n\n  async function copyToClip() {\n    await navigator.clipboard.writeText(document.location.href)\n    setOpen(true)\n  }\n\n  const handleClose = (event, reason) => {\n    if (reason === 'clickaway') {\n      return\n    }\n    setOpen(false)\n  }\n\n  return (\n    <>\n      <Button size=\"small\" variant=\"contained\" onClick={copyToClip}>\n        Share this tree URL\n      </Button>\n      <Snackbar\n        anchorOrigin={{ vertical: 'bottom', horizontal: 'right' }}\n        message=\"URL copied to clipboard\"\n        onClose={handleClose}\n        open={open}\n        autoHideDuration={1500}\n      />\n    </>\n  )\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter as Router, Route } from 'react-router-dom'\nimport { QueryParamProvider } from 'use-query-params'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n// SEMANTIC UI CSS\nconst styleLink = document.createElement('link')\nstyleLink.rel = 'stylesheet'\nstyleLink.href =\n  'https://cdn.jsdelivr.net/npm/semantic-ui/dist/semantic.min.css'\ndocument.head.appendChild(styleLink)\n\nReactDOM.render(\n  <Router>\n    <QueryParamProvider ReactRouterRoute={Route}>\n      <App />\n    </QueryParamProvider>\n  </Router>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n","import React from 'react'\n\nexport default function usePersistedState(key, defaultValue) {\n  const [state, setState] = React.useState(() => {\n    const persistedState = localStorage.getItem(key)\n    return persistedState ? JSON.parse(persistedState) : defaultValue\n  })\n  React.useEffect(() => {\n    window.localStorage.setItem(key, JSON.stringify(state))\n  }, [state, key])\n  return [state, setState]\n}\n"],"sourceRoot":""}